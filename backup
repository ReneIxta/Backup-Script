#!/bin/bash

# Die function to echo to stderr, will be called inside usage function
die() { echo "$@" >&2; exit 1; }
usage() { die "usage: $0 (-R|-S) home-dir archive-dir"; }

# Parse arguments and make sure there are three
(( $# == 3 )) || usage

# Case statement to set up "flags" for first arguments
case "$1" in
-S) save=true;;
-R) save=false;;
*) usage;;
esac

# Store the second argument in variable
# Second variable is the user directory
homeDir=$2

# Store third argument in variable
# This is where the back up directory will be
backupDir=$3

# Make sure arguments are what we want them to be.
# Make sure second and third arguments are directories
# check if home directory is absolute
[[ $homeDir = /* ]] || die "$0: directories must be absolute"
[[ -e $homeDir ]] || die "$0: "$homeDir" doesn't exist" # does the directory exist?
[[ -d $homeDir ]] || die "$0: "$homeDir" is not a directory" # is this a directory?
[[ -r $homeDir ]] || die "$0: "$homeDir" is not readable" # is this readable
[[ -x $homeDir ]] || die "$0: "$homeDir" is not executable" # is this executable?
# check if backup directory is absolute
[[ $backupDir = /* ]] || die "$0: directories must be absolute"
[[ -e $backupDir ]] || die "$0: "$backupDir" doesn't exist" # does the directory exist?
[[ -d $backupDir ]] || die "$0: "$backupDir" is not a directory" # is this a directory?
[[ -r $backupDir ]] || die "$0: "$backupDir" is not readable" # is this readable
[[ -x $backupDir ]] || die "$0: "$backupDir" is not executable" # is this executable?
[[ -w $backupDir ]] || die "$0: "$backupDir" is not writeable" # is this writeable?

#create what-is-here file
data=$backupDir/what-is-here
scratch=/tmp/workdir

# If user used -S argument then we must save all the user's directories
# into our backup directory.
if $save # if save is true do the following
then
    [[ -w $backupDir ]] || die "$0: "$backupDir" is not writeable" # is this writeable?
    > "$data"
    for user in $(ls "$homeDir") #loop through all users in home directory
    do
        tarfile=$backupDir/$user.tgz
        tar -czvf $tarfile $homeDir/$user
        let time=$(date +%s) # backup date in epoch seconds
        let fileCount=$(tar tvf "$tarfile" | grep -c '^-') # count all files
        let dirCount=$(tar tvf "$tarfile" | grep -c '^d') # count all directories
        #let byteCount=$(tar tvf "$tarfile" | wc -c) #count bytes
        echo "$user, $home/$user, $time, $fileCount, $dirCount" >> "$data"
    done
else #user passed -R argument
    while read line
    do
        user=$(echo $line | cut -d, -f1)
        tarfile=$backupDir/$user.tgz
        if [[ ! -f $tarfile ]]
        then
            echo "$0: No backup available for $user" >&2
            continue
        fi
        rm -rf "$scratch"
        mkdir -p "$scratch"
        cd "$scratch"
        tar -xf "$tarfile"
        find -type f |
        while read f
        do
        echo $f
            [[ -e $homeDir/$user/$f ]] || cp --parents "$f" "$homeDir/$user/$f"
        done
        rm -rf "$scratch"
    done < "$data"
fi
